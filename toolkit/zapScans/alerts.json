[
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "max-age=604800",
    "pluginId": "10015",
    "cweid": "525",
    "confidence": "Low",
    "wascid": "13",
    "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
    "messageId": "4",
    "inputVector": "",
    "url": "https://applyable.com.au/sitemap.xml",
    "tags": {
      "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
    "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
    "alert": "Re-examine Cache-control Directives",
    "param": "cache-control",
    "attack": "",
    "name": "Re-examine Cache-control Directives",
    "risk": "Informational",
    "id": "0",
    "alertRef": "10015"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "max-age=604800",
    "pluginId": "10015",
    "cweid": "525",
    "confidence": "Low",
    "wascid": "13",
    "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
    "messageId": "7",
    "inputVector": "",
    "url": "https://applyable.com.au/robots.txt",
    "tags": {
      "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
    "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
    "alert": "Re-examine Cache-control Directives",
    "param": "cache-control",
    "attack": "",
    "name": "Re-examine Cache-control Directives",
    "risk": "Informational",
    "id": "1",
    "alertRef": "10015"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "7",
    "inputVector": "",
    "url": "https://applyable.com.au/robots.txt",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "2",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "4",
    "inputVector": "",
    "url": "https://applyable.com.au/sitemap.xml",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "3",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
    "method": "GET",
    "evidence": "",
    "pluginId": "10021",
    "cweid": "693",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
    "messageId": "7",
    "inputVector": "",
    "url": "https://applyable.com.au/robots.txt",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
    "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
    "alert": "X-Content-Type-Options Header Missing",
    "param": "x-content-type-options",
    "attack": "",
    "name": "X-Content-Type-Options Header Missing",
    "risk": "Low",
    "id": "4",
    "alertRef": "10021"
  },
  {
    "sourceid": "3",
    "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
    "method": "GET",
    "evidence": "",
    "pluginId": "10021",
    "cweid": "693",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
    "messageId": "4",
    "inputVector": "",
    "url": "https://applyable.com.au/sitemap.xml",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
    "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
    "alert": "X-Content-Type-Options Header Missing",
    "param": "x-content-type-options",
    "attack": "",
    "name": "X-Content-Type-Options Header Missing",
    "risk": "Low",
    "id": "5",
    "alertRef": "10021"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10038",
    "cweid": "693",
    "confidence": "High",
    "wascid": "15",
    "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
    "messageId": "16",
    "inputVector": "",
    "url": "https://applyable.com.au/apple-touch-icon.png",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
    "alert": "Content Security Policy (CSP) Header Not Set",
    "param": "",
    "attack": "",
    "name": "Content Security Policy (CSP) Header Not Set",
    "risk": "Medium",
    "id": "6",
    "alertRef": "10038-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "16",
    "inputVector": "",
    "url": "https://applyable.com.au/apple-touch-icon.png",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "7",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10020",
    "cweid": "1021",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
    "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
    "alert": "Missing Anti-clickjacking Header",
    "param": "x-frame-options",
    "attack": "",
    "name": "Missing Anti-clickjacking Header",
    "risk": "Medium",
    "id": "8",
    "alertRef": "10020-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "max-age=0",
    "pluginId": "10015",
    "cweid": "525",
    "confidence": "Low",
    "wascid": "13",
    "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {
      "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
    "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
    "alert": "Re-examine Cache-control Directives",
    "param": "cache-control",
    "attack": "",
    "name": "Re-examine Cache-control Directives",
    "risk": "Informational",
    "id": "9",
    "alertRef": "10015"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10038",
    "cweid": "693",
    "confidence": "High",
    "wascid": "15",
    "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
    "alert": "Content Security Policy (CSP) Header Not Set",
    "param": "",
    "attack": "",
    "name": "Content Security Policy (CSP) Header Not Set",
    "risk": "Medium",
    "id": "10",
    "alertRef": "10038-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "<script async src=\"https://tally.so/widgets/embed.js\"></script>",
    "pluginId": "10017",
    "cweid": "829",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The page includes one or more script files from a third-party domain.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {
      "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
    },
    "reference": "",
    "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
    "alert": "Cross-Domain JavaScript Source File Inclusion",
    "param": "https://tally.so/widgets/embed.js",
    "attack": "",
    "name": "Cross-Domain JavaScript Source File Inclusion",
    "risk": "Low",
    "id": "11",
    "alertRef": "10017"
  },
  {
    "sourceid": "3",
    "other": "The following pattern was used: \\bSELECT\\b and was detected in the element starting with: \"<script>(function() {var on = addEventListener,off = removeEventListener,$ = function(q) { return document.querySelector(q) },$$\", see evidence field for the suspicious comment/snippet.",
    "method": "GET",
    "evidence": "select",
    "pluginId": "10027",
    "cweid": "200",
    "confidence": "Low",
    "wascid": "13",
    "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {
      "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
      "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
      "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"
    },
    "reference": "",
    "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
    "alert": "Information Disclosure - Suspicious Comments",
    "param": "",
    "attack": "",
    "name": "Information Disclosure - Suspicious Comments",
    "risk": "Informational",
    "id": "12",
    "alertRef": "10027"
  },
  {
    "sourceid": "3",
    "other": "A noScript tag has been found, which is an indication that the application works differently with JavaScript enabled compared to when it is not.",
    "method": "GET",
    "evidence": "<noscript><style>body {overflow: auto !important;}#main {opacity: 1.0 !important;transform: none !important;transition: none !important;filter: none !important;}</style></noscript>",
    "pluginId": "10109",
    "cweid": "-1",
    "confidence": "Medium",
    "wascid": "-1",
    "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {},
    "reference": "",
    "solution": "This is an informational alert and so no changes are required.",
    "alert": "Modern Web Application",
    "param": "",
    "attack": "",
    "name": "Modern Web Application",
    "risk": "Informational",
    "id": "13",
    "alertRef": "10109"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "14",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
    "method": "GET",
    "evidence": "",
    "pluginId": "10021",
    "cweid": "693",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
    "messageId": "8",
    "inputVector": "",
    "url": "https://applyable.com.au/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
    "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
    "alert": "X-Content-Type-Options Header Missing",
    "param": "x-content-type-options",
    "attack": "",
    "name": "X-Content-Type-Options Header Missing",
    "risk": "Low",
    "id": "15",
    "alertRef": "10021"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10038",
    "cweid": "693",
    "confidence": "High",
    "wascid": "15",
    "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
    "messageId": "17",
    "inputVector": "",
    "url": "https://applyable.com.au/favicon-32x32.png",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
    "alert": "Content Security Policy (CSP) Header Not Set",
    "param": "",
    "attack": "",
    "name": "Content Security Policy (CSP) Header Not Set",
    "risk": "Medium",
    "id": "16",
    "alertRef": "10038-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10038",
    "cweid": "693",
    "confidence": "High",
    "wascid": "15",
    "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
    "messageId": "18",
    "inputVector": "",
    "url": "https://applyable.com.au/site.webmanifest",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
    "alert": "Content Security Policy (CSP) Header Not Set",
    "param": "",
    "attack": "",
    "name": "Content Security Policy (CSP) Header Not Set",
    "risk": "Medium",
    "id": "17",
    "alertRef": "10038-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10038",
    "cweid": "693",
    "confidence": "High",
    "wascid": "15",
    "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
    "messageId": "23",
    "inputVector": "",
    "url": "https://applyable.com.au/favicon-16x16.png",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
    "alert": "Content Security Policy (CSP) Header Not Set",
    "param": "",
    "attack": "",
    "name": "Content Security Policy (CSP) Header Not Set",
    "risk": "Medium",
    "id": "18",
    "alertRef": "10038-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "17",
    "inputVector": "",
    "url": "https://applyable.com.au/favicon-32x32.png",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "19",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "23",
    "inputVector": "",
    "url": "https://applyable.com.au/favicon-16x16.png",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "21",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "18",
    "inputVector": "",
    "url": "https://applyable.com.au/site.webmanifest",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "22",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "19",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/favicon.png?v=9d60309a",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "23",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
    "method": "GET",
    "evidence": "",
    "pluginId": "10021",
    "cweid": "693",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
    "messageId": "19",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/favicon.png?v=9d60309a",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
    "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
    "alert": "X-Content-Type-Options Header Missing",
    "param": "x-content-type-options",
    "attack": "",
    "name": "X-Content-Type-Options Header Missing",
    "risk": "Low",
    "id": "24",
    "alertRef": "10021"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "24",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/apple-touch-icon.png?v=9d60309a",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "32",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
    "method": "GET",
    "evidence": "",
    "pluginId": "10021",
    "cweid": "693",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
    "messageId": "24",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/apple-touch-icon.png?v=9d60309a",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
    "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
    "alert": "X-Content-Type-Options Header Missing",
    "param": "x-content-type-options",
    "attack": "",
    "name": "X-Content-Type-Options Header Missing",
    "risk": "Low",
    "id": "33",
    "alertRef": "10021"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "25",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/image03.jpg?v=9d60309a",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "34",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
    "method": "GET",
    "evidence": "",
    "pluginId": "10021",
    "cweid": "693",
    "confidence": "Medium",
    "wascid": "15",
    "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
    "messageId": "25",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/image03.jpg?v=9d60309a",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx\nhttps://owasp.org/www-community/Security_Headers",
    "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
    "alert": "X-Content-Type-Options Header Missing",
    "param": "x-content-type-options",
    "attack": "",
    "name": "X-Content-Type-Options Header Missing",
    "risk": "Low",
    "id": "35",
    "alertRef": "10021"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "38",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "41",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "42",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "46",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10038",
    "cweid": "693",
    "confidence": "High",
    "wascid": "15",
    "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
    "messageId": "109",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
    "alert": "Content Security Policy (CSP) Header Not Set",
    "param": "",
    "attack": "",
    "name": "Content Security Policy (CSP) Header Not Set",
    "risk": "Medium",
    "id": "148",
    "alertRef": "10038-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "109",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "151",
    "alertRef": "10035"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10038",
    "cweid": "693",
    "confidence": "High",
    "wascid": "15",
    "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
    "messageId": "114",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttp://www.w3.org/TR/CSP/\nhttp://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html\nhttp://www.html5rocks.com/en/tutorials/security/content-security-policy/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
    "alert": "Content Security Policy (CSP) Header Not Set",
    "param": "",
    "attack": "",
    "name": "Content Security Policy (CSP) Header Not Set",
    "risk": "Medium",
    "id": "154",
    "alertRef": "10038-1"
  },
  {
    "sourceid": "3",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10035",
    "cweid": "319",
    "confidence": "High",
    "wascid": "15",
    "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
    "messageId": "114",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images/",
    "tags": {
      "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
      "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttp://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttp://caniuse.com/stricttransportsecurity\nhttp://tools.ietf.org/html/rfc6797",
    "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
    "alert": "Strict-Transport-Security Header Not Set",
    "param": "",
    "attack": "",
    "name": "Strict-Transport-Security Header Not Set",
    "risk": "Low",
    "id": "155",
    "alertRef": "10035"
  },
  {
    "sourceid": "1",
    "other": "The query time is controllable using parameter value [case randomblob(10000000) when not null then 1 else 1 end ], which caused the request to take [3,725] milliseconds, parameter value [case randomblob(100000000) when not null then 1 else 1 end ], which caused the request to take [4,701] milliseconds, when the original unmodified query with value [9d60309a] took [3,528] milliseconds.",
    "method": "GET",
    "evidence": "The query time is controllable using parameter value [case randomblob(10000000) when not null then 1 else 1 end ], which caused the request to take [3,725] milliseconds, parameter value [case randomblob(100000000) when not null then 1 else 1 end ], which caused the request to take [4,701] milliseconds, when the original unmodified query with value [9d60309a] took [3,528] milliseconds.",
    "pluginId": "40024",
    "cweid": "89",
    "confidence": "Medium",
    "wascid": "19",
    "description": "SQL injection may be possible.",
    "messageId": "3513",
    "inputVector": "querystring",
    "url": "https://applyable.com.au/assets/images/image03.jpg?v=9d60309a",
    "tags": {
      "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
      "WSTG-v42-INPV-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
      "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
    },
    "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
    "solution": "Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.",
    "alert": "SQL Injection - SQLite",
    "param": "v",
    "attack": "case randomblob(10000000) when not null then 1 else 1 end ",
    "name": "SQL Injection - SQLite",
    "risk": "High",
    "id": "6163",
    "alertRef": "40024"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4045",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6164",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4066",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6165",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4073",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6166",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4107",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6167",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4121",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6168",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4127",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6169",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4139",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6170",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4151",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6171",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4157",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6172",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4173",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6173",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4176",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6174",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4180",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6175",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4182",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6176",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4185",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6177",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4188",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6178",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4190",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6179",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4192",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6180",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4196",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6181",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4198",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6182",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4202",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6183",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4205",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6184",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4207",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6185",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4209",
    "inputVector": "",
    "url": "https://applyable.com.au/assets",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6186",
    "alertRef": "10104"
  },
  {
    "sourceid": "1",
    "other": "",
    "method": "GET",
    "evidence": "",
    "pluginId": "10104",
    "cweid": "0",
    "confidence": "Medium",
    "wascid": "0",
    "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
    "messageId": "4211",
    "inputVector": "",
    "url": "https://applyable.com.au/assets/images",
    "tags": {},
    "reference": "https://owasp.org/wstg",
    "solution": "",
    "alert": "User Agent Fuzzer",
    "param": "Header User-Agent",
    "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "name": "User Agent Fuzzer",
    "risk": "Informational",
    "id": "6187",
    "alertRef": "10104"
  }
]