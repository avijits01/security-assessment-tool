{"version":3,"file":"sanitize.js","sourceRoot":"","sources":["../src/sanitize.ts"],"names":[],"mappings":"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","sourcesContent":["import { ipVersion } from \"is-ip\";\nimport { Label } from \"./parse-domain.js\";\nimport { NO_HOSTNAME } from \"./from-url.js\";\n\n// See https://en.wikipedia.org/wiki/Domain_name\n// See https://tools.ietf.org/html/rfc1034\nconst LABEL_SEPARATOR = \".\";\nconst LABEL_LENGTH_MIN = 1;\nconst LABEL_LENGTH_MAX = 63;\n/**\n * 255 octets - 2 octets if you remove the last dot\n * @see https://devblogs.microsoft.com/oldnewthing/20120412-00/?p=7873\n */\nconst DOMAIN_LENGTH_MAX = 253;\n\nconst textEncoder = new TextEncoder();\n\nexport enum Validation {\n  /**\n   * Allows any octets as labels\n   * but still restricts the length of labels and the overall domain.\n   *\n   * @see https://www.rfc-editor.org/rfc/rfc2181#section-11\n   **/\n  Lax = \"LAX\",\n\n  /**\n   * Only allows ASCII letters, digits and hyphens (aka LDH),\n   * forbids hyphens at the beginning or end of a label\n   * and requires top-level domain names not to be all-numeric.\n   *\n   * This is the default if no validation is configured.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc3696#section-2\n   */\n  Strict = \"STRICT\",\n}\n\nexport enum ValidationErrorType {\n  NoHostname = \"NO_HOSTNAME\",\n  DomainMaxLength = \"DOMAIN_MAX_LENGTH\",\n  LabelMinLength = \"LABEL_MIN_LENGTH\",\n  LabelMaxLength = \"LABEL_MAX_LENGTH\",\n  LabelInvalidCharacter = \"LABEL_INVALID_CHARACTER\",\n  LastLabelInvalid = \"LAST_LABEL_INVALID\",\n}\n\nexport type ValidationError = {\n  type: ValidationErrorType;\n  message: string;\n  column: number;\n};\n\nexport enum SanitizationResultType {\n  ValidIp = \"VALID_IP\",\n  ValidDomain = \"VALID_DOMAIN\",\n  Error = \"ERROR\",\n}\n\nexport type SanitizationResultValidIp = {\n  type: SanitizationResultType.ValidIp;\n  ip: string;\n  ipVersion: Exclude<ReturnType<typeof ipVersion>, undefined>;\n};\n\nexport type SanitizationResultValidDomain = {\n  type: SanitizationResultType.ValidDomain;\n  domain: string;\n  labels: Array<Label>;\n};\n\nexport type SanitizationResultError = {\n  type: SanitizationResultType.Error;\n  errors: Array<ValidationError>;\n};\n\nexport type SanitizationResult =\n  | SanitizationResultValidIp\n  | SanitizationResultValidDomain\n  | SanitizationResultError;\n\nconst createNoHostnameError = (input: unknown) => {\n  return {\n    type: ValidationErrorType.NoHostname,\n    message: `The given input ${String(input)} does not look like a hostname.`,\n    column: 1,\n  };\n};\n\nconst createDomainMaxLengthError = (domain: string, length: number) => {\n  return {\n    type: ValidationErrorType.DomainMaxLength,\n    message: `Domain \"${domain}\" is too long. Domain is ${length} octets long but should not be longer than ${DOMAIN_LENGTH_MAX}.`,\n    column: length,\n  };\n};\n\nconst createLabelMinLengthError = (label: string, column: number) => {\n  const length = label.length;\n\n  return {\n    type: ValidationErrorType.LabelMinLength,\n    message: `Label \"${label}\" is too short. Label is ${length} octets long but should be at least ${LABEL_LENGTH_MIN}.`,\n    column,\n  };\n};\n\nconst createLabelMaxLengthError = (label: string, column: number) => {\n  const length = label.length;\n\n  return {\n    type: ValidationErrorType.LabelMaxLength,\n    message: `Label \"${label}\" is too long. Label is ${length} octets long but should not be longer than ${LABEL_LENGTH_MAX}.`,\n    column,\n  };\n};\n\nconst createLabelInvalidCharacterError = (\n  label: string,\n  invalidCharacter: string,\n  column: number\n) => {\n  return {\n    type: ValidationErrorType.LabelInvalidCharacter,\n    message: `Label \"${label}\" contains invalid character \"${invalidCharacter}\" at column ${column}.`,\n    column,\n  };\n};\n\nconst createLastLabelInvalidError = (label: string, column: number) => {\n  return {\n    type: ValidationErrorType.LabelInvalidCharacter,\n    message: `Last label \"${label}\" must not be all-numeric.`,\n    column,\n  };\n};\n\nexport const sanitize = (\n  input: string | typeof NO_HOSTNAME,\n  options: { validation?: Validation } = {}\n): SanitizationResult => {\n  // Extra check for non-TypeScript users\n  if (typeof input !== \"string\") {\n    return {\n      type: SanitizationResultType.Error,\n      errors: [createNoHostnameError(input)],\n    };\n  }\n\n  if (input === \"\") {\n    return {\n      type: SanitizationResultType.ValidDomain,\n      domain: input,\n      labels: [],\n    };\n  }\n\n  // IPv6 addresses are surrounded by square brackets in URLs\n  // See https://tools.ietf.org/html/rfc3986#section-3.2.2\n  const inputTrimmedAsIp = input.replace(/^\\[|]$/g, \"\");\n  const ipVersionOfInput = ipVersion(inputTrimmedAsIp);\n\n  if (ipVersionOfInput !== undefined) {\n    return {\n      type: SanitizationResultType.ValidIp,\n      ip: inputTrimmedAsIp,\n      ipVersion: ipVersionOfInput,\n    };\n  }\n\n  const lastChar = input.charAt(input.length - 1);\n  const canonicalInput =\n    lastChar === LABEL_SEPARATOR ? input.slice(0, -1) : input;\n  const octets = new TextEncoder().encode(canonicalInput);\n\n  if (octets.length > DOMAIN_LENGTH_MAX) {\n    return {\n      type: SanitizationResultType.Error,\n      errors: [createDomainMaxLengthError(input, octets.length)],\n    };\n  }\n\n  const labels = canonicalInput.split(LABEL_SEPARATOR);\n\n  const { validation = Validation.Strict } = options;\n  const labelValidationErrors = validateLabels[validation](labels);\n\n  if (labelValidationErrors.length > 0) {\n    return {\n      type: SanitizationResultType.Error,\n      errors: labelValidationErrors,\n    };\n  }\n\n  return {\n    type: SanitizationResultType.ValidDomain,\n    domain: input,\n    labels,\n  };\n};\n\nconst validateLabels = {\n  [Validation.Lax]: (labels: Array<string>) => {\n    const labelValidationErrors = [];\n    let column = 1;\n\n    for (const label of labels) {\n      const octets = textEncoder.encode(label);\n\n      if (octets.length < LABEL_LENGTH_MIN) {\n        labelValidationErrors.push(createLabelMinLengthError(label, column));\n      } else if (octets.length > LABEL_LENGTH_MAX) {\n        labelValidationErrors.push(createLabelMaxLengthError(label, column));\n      }\n      column += label.length + LABEL_SEPARATOR.length;\n    }\n\n    return labelValidationErrors;\n  },\n  [Validation.Strict]: (labels: Array<string>) => {\n    const labelValidationErrors = [];\n    let column = 1;\n    let lastLabel;\n\n    for (const label of labels) {\n      // According to https://tools.ietf.org/html/rfc6761 labels should\n      // only contain ASCII letters, digits and hyphens (LDH).\n      const invalidCharacter = /[^\\da-z-]/i.exec(label);\n\n      if (invalidCharacter) {\n        labelValidationErrors.push(\n          createLabelInvalidCharacterError(\n            label,\n            invalidCharacter[0],\n            invalidCharacter.index + 1\n          )\n        );\n      }\n      if (label.startsWith(\"-\")) {\n        labelValidationErrors.push(\n          createLabelInvalidCharacterError(label, \"-\", column)\n        );\n      } else if (label.endsWith(\"-\")) {\n        labelValidationErrors.push(\n          createLabelInvalidCharacterError(\n            label,\n            \"-\",\n            column + label.length - 1\n          )\n        );\n      }\n      if (\n        // We can use .length here to check for the octet size because\n        // label can only contain ASCII LDH characters at this point.\n        label.length < LABEL_LENGTH_MIN\n      ) {\n        labelValidationErrors.push(createLabelMinLengthError(label, column));\n      } else if (label.length > LABEL_LENGTH_MAX) {\n        labelValidationErrors.push(createLabelMaxLengthError(label, column));\n      }\n\n      column += label.length + LABEL_SEPARATOR.length;\n      lastLabel = label;\n    }\n\n    if (lastLabel !== undefined && /[a-z-]/iu.test(lastLabel) === false) {\n      labelValidationErrors.push(\n        createLastLabelInvalidError(\n          lastLabel,\n          column - lastLabel.length - LABEL_SEPARATOR.length\n        )\n      );\n    }\n\n    return labelValidationErrors;\n  },\n};\n"]}