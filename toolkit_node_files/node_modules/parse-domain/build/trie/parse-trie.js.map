{"version":3,"file":"parse-trie.js","sourceRoot":"","sources":["../../src/trie/parse-trie.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAC9C,OAAO,EACL,cAAc,EACd,gBAAgB,EAEhB,cAAc,GACf,MAAM,YAAY,CAAC;AAEpB,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,cAAsB,EAAE,EAAE;IAClD,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAC;IAClC,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,UAAU,GAAa,QAAQ,CAAC;IACpC,gEAAgE;IAChE,6EAA6E;IAC7E,IAAI,IAAI,GAAG,QAAoB,CAAC;IAEhC,MAAM,SAAS,GAAG,GAAG,EAAE;QACrB,IAAI,GAAG,gBAAgB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC5C,MAAM,GAAG,EAAE,CAAC;IACd,CAAC,CAAC;IAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC9C,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEtC,QAAQ,IAAI,EAAE;YACZ,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC;gBACpB,SAAS,EAAE,CAAC;gBACZ,SAAS;aACV;YACD,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC;gBACpB,SAAS,EAAE,CAAC;gBACZ,UAAU,GAAG,IAAI,CAAC;gBAClB,SAAS;aACV;YACD,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC;gBACrB,SAAS,EAAE,CAAC;gBACZ,UAAU,GAAG,QAAQ,CAAC;gBACtB,SAAS;aACV;YACD,KAAK,UAAU,CAAC,EAAE,CAAC,CAAC;gBAClB,IAAI,UAAU,CAAC,IAAI,KAAK,cAAc,EAAE;oBACtC,MAAM,IAAI,KAAK,CACb,wCAAwC,CAAC,qDAAqD,CAC/F,CAAC;iBACH;gBACD,SAAS,EAAE,CAAC;gBACZ,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC;gBAC/B,SAAS;aACV;SACF;QACD,MAAM,IAAI,IAAI,CAAC;KAChB;IAED,IAAI,MAAM,KAAK,EAAE,EAAE;QACjB,SAAS,EAAE,CAAC;KACb;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import * as characters from \"./characters.js\";\nimport {\n  createRootNode,\n  createOrGetChild,\n  TrieNode,\n  NODE_TYPE_ROOT,\n} from \"./nodes.js\";\n\nexport const parseTrie = (serializedTrie: string) => {\n  const rootNode = createRootNode();\n  let domain = \"\";\n  let parentNode: TrieNode = rootNode;\n  // Type assertion necessary here due to a TypeScript unsoundness\n  // https://github.com/microsoft/TypeScript/issues/9998#issuecomment-235963457\n  let node = rootNode as TrieNode;\n\n  const addDomain = () => {\n    node = createOrGetChild(parentNode, domain);\n    domain = \"\";\n  };\n\n  for (let i = 0; i < serializedTrie.length; i++) {\n    const char = serializedTrie.charAt(i);\n\n    switch (char) {\n      case characters.SAME: {\n        addDomain();\n        continue;\n      }\n      case characters.DOWN: {\n        addDomain();\n        parentNode = node;\n        continue;\n      }\n      case characters.RESET: {\n        addDomain();\n        parentNode = rootNode;\n        continue;\n      }\n      case characters.UP: {\n        if (parentNode.type === NODE_TYPE_ROOT) {\n          throw new Error(\n            `Error in serialized trie at position ${i}: Cannot go up, current parent node is already root`\n          );\n        }\n        addDomain();\n        parentNode = parentNode.parent;\n        continue;\n      }\n    }\n    domain += char;\n  }\n\n  if (domain !== \"\") {\n    addDomain();\n  }\n\n  return rootNode;\n};\n"]}