{"version":3,"file":"nodes.js","sourceRoot":"","sources":["../../src/trie/nodes.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC7C,MAAM,CAAC,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAe/C,MAAM,CAAC,MAAM,cAAc,GAAG,GAAiB,EAAE;IAC/C,OAAO;QACL,IAAI,EAAE,cAAc;QACpB,QAAQ,EAAE,IAAI,GAAG,EAAE;KACpB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,MAAgB,EAAE,KAAa,EAAE,EAAE;IAClE,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAEvC,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,KAAK,GAAG;YACN,IAAI,EAAE,eAAe;YACrB,KAAK;YACL,QAAQ,EAAE,IAAI,GAAG,EAAE;YACnB,MAAM;SACP,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACnC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["export const NODE_TYPE_ROOT = Symbol(\"ROOT\");\nexport const NODE_TYPE_CHILD = Symbol(\"CHILD\");\n\nexport type TrieRootNode = {\n  type: typeof NODE_TYPE_ROOT;\n  children: Map<string, TrieChildNode>;\n};\nexport type TrieChildNode = {\n  type: typeof NODE_TYPE_CHILD;\n  label: string;\n  children: Map<string, TrieChildNode>;\n  parent: TrieNode;\n};\n\nexport type TrieNode = TrieRootNode | TrieChildNode;\n\nexport const createRootNode = (): TrieRootNode => {\n  return {\n    type: NODE_TYPE_ROOT,\n    children: new Map(),\n  };\n};\n\nexport const createOrGetChild = (parent: TrieNode, label: string) => {\n  let child = parent.children.get(label);\n\n  if (child === undefined) {\n    child = {\n      type: NODE_TYPE_CHILD,\n      label,\n      children: new Map(),\n      parent,\n    };\n    parent.children.set(label, child);\n  }\n\n  return child;\n};\n"]}