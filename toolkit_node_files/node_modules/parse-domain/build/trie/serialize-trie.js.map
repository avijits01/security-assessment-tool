{"version":3,"file":"serialize-trie.js","sourceRoot":"","sources":["../../src/trie/serialize-trie.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AAEjD,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAkB,EAAU,EAAE;IAkB1D,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,MAAM,KAAK,GAAqB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IACnE,IAAI,OAA8B,CAAC;IAEnC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,KAAK,SAAS,EAAE;QAC9C,IAAI,OAAO,KAAK,EAAE,EAAE;YAClB,UAAU,IAAI,EAAE,CAAC;YACjB,SAAS;SACV;QACD,UAAU,IAAI,OAAO,CAAC,KAAK,CAAC;QAC5B,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE;YAC/B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;gBACvC,UAAU,IAAI,IAAI,CAAC;aACpB;YACD,SAAS;SACV;QACD,UAAU,IAAI,IAAI,CAAC;QAEnB,MAAM,QAAQ,GAAqB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAEzE,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACnB;QACD,KAAK,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,CAAC;KAC5B;IAED,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC","sourcesContent":["import { TrieRootNode, TrieChildNode } from \"./nodes.js\";\nimport { DOWN, UP, SAME } from \"./characters.js\";\n\nexport const serializeTrie = (root: TrieRootNode): string => {\n  /*\n\tA trie might look like this:\n\n\t                root\n\t                 |\n\t   +-------+-----+-----+-----------+\n\t   |       |           |           |\n\t com      uk          jp         موقع\n\t          |           |\n\t       +--+--+     +--+--+\n\t       |    |      |     |\n\t      co   gov   静岡   岐阜\n\n\tAnd the textual representation of the trie looks like this:\n\tcom|uk>co,gov|jp>静岡,岐阜|موقع\n\t*/\n  type QueueItem = TrieChildNode | typeof UP;\n  let serialized = \"\";\n  const queue: Array<QueueItem> = Array.from(root.children.values());\n  let current: QueueItem | undefined;\n\n  while ((current = queue.shift()) !== undefined) {\n    if (current === UP) {\n      serialized += UP;\n      continue;\n    }\n    serialized += current.label;\n    if (current.children.size === 0) {\n      if (queue.length > 0 && queue[0] !== UP) {\n        serialized += SAME;\n      }\n      continue;\n    }\n    serialized += DOWN;\n\n    const newItems: Array<QueueItem> = Array.from(current.children.values());\n\n    if (queue.length > 0) {\n      newItems.push(UP);\n    }\n    queue.unshift(...newItems);\n  }\n\n  return serialized;\n};\n"]}